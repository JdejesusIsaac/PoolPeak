"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHistoryEntry = exports.SimBundleResult = exports.SendBundleResult = exports.StreamEventType = void 0;
/**
 * Used to specify which type of event to listen for.
 */
var StreamEventType;
(function (StreamEventType) {
    StreamEventType["Bundle"] = "bundle";
    StreamEventType["Transaction"] = "transaction";
})(StreamEventType = exports.StreamEventType || (exports.StreamEventType = {}));
/** Decodes a raw sendBundle response. */
const SendBundleResult = (response) => ({
    bundleHash: response.bundleHash,
});
exports.SendBundleResult = SendBundleResult;
/** Decodes a raw simBundle response. */
const SimBundleResult = (response) => ({
    success: response.success,
    error: response.error,
    stateBlock: parseInt(response.stateBlock, 16),
    mevGasPrice: BigInt(response.mevGasPrice),
    profit: BigInt(response.profit),
    refundableValue: BigInt(response.refundableValue),
    gasUsed: BigInt(response.gasUsed),
    logs: response.logs,
});
exports.SimBundleResult = SimBundleResult;
/** A past event from the MEV-Share event stream. */
class EventHistoryEntry {
    constructor(entry) {
        this.block = entry.block;
        this.timestamp = entry.timestamp;
        this.hint = Object.assign(Object.assign({}, entry.hint), { gasUsed: entry.hint.gasUsed ? BigInt(entry.hint.gasUsed) : BigInt(0), mevGasPrice: entry.hint.mevGasPrice ? BigInt(entry.hint.mevGasPrice) : BigInt(0) });
    }
}
exports.EventHistoryEntry = EventHistoryEntry;
//# sourceMappingURL=interfaces.js.map