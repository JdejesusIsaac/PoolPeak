"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mungeSimBundleOptions = exports.mungeBundleParams = exports.mungePrivateTxParams = void 0;
/**
 * Convert name format of user-specified hints for MEV-Share API requests.
 * @param hints - Hints specified by the user.
 */
const mungeHintPreferences = (hints) => {
    return {
        contract_address: hints.contractAddress,
        function_selector: hints.functionSelector,
        calldata: hints.calldata,
        logs: hints.logs,
        tx_hash: hints.txHash,
        hash: true, // tx hash is always shared on Flashbots MEV-Share; abstract away from user
        // setting all hints except hash to false will enable full privacy
    };
};
/**
 * Converts user-specified hints into the array format accepted by the API.
 * @param hints - Hints specified by the user.
 */
const extractSpecifiedHints = (hints) => {
    return Object.entries(mungeHintPreferences(hints))
        .map((kv) => kv[1] ? kv[0] : undefined)
        .filter(v => !!v);
};
/**
 * Converts user-specified parameters into parameters for a sendPrivateTransaction call to the MEV-Share API.
 * @param signedTx - Signed transaction to send.
 * @param options - Privacy/execution settings for the transaction.
 * @returns Single-element array containing params object for sendPrivateTransaction call.
 */
function mungePrivateTxParams(signedTx, options) {
    return [{
            tx: signedTx,
            maxBlockNumber: (options === null || options === void 0 ? void 0 : options.maxBlockNumber) && `0x${options.maxBlockNumber.toString(16)}`,
            preferences: {
                fast: true,
                // privacy uses default (Stable) config if no hints specified
                privacy: (options === null || options === void 0 ? void 0 : options.hints) && {
                    hints: extractSpecifiedHints(options.hints),
                },
                builders: options === null || options === void 0 ? void 0 : options.builders,
            },
        }];
}
exports.mungePrivateTxParams = mungePrivateTxParams;
/**
 * Converts user-specified parameters into parameters for a mev_sendBundle call to the MEV-Share API.
 * @param params - Privacy/execution parameters for the bundle
 * @returns Single-element array containing params object for sendPrivateTransaction call.
 */
function mungeBundleParams(params) {
    // recursively munge nested bundle params
    const mungedBundle = params.body.map((i) => i.bundle ? mungeBundleParams(i.bundle) : i);
    return Object.assign(Object.assign({}, params), { body: mungedBundle, version: params.version || "v0.1", inclusion: Object.assign(Object.assign({}, params.inclusion), { block: `0x${params.inclusion.block.toString(16)}`, maxBlock: params.inclusion.maxBlock ? `0x${params.inclusion.maxBlock.toString(16)}` : undefined }), validity: params.validity ? params.validity : {
            refund: [],
            refundConfig: [],
        }, privacy: params.privacy && Object.assign(Object.assign({}, params.privacy), { hints: params.privacy.hints && extractSpecifiedHints(params.privacy.hints) }) });
}
exports.mungeBundleParams = mungeBundleParams;
/** Convert SimBundleOptions into format required by eth_simBundle.  */
function mungeSimBundleOptions(params) {
    return Object.assign(Object.assign({}, params), { 
        // coinbase & timeout can be left as they are
        parentBlock: params.parentBlock && `0x${BigInt(params.parentBlock).toString(16)}`, blockNumber: params.blockNumber && `0x${BigInt(params.blockNumber).toString(16)}`, timestamp: params.timestamp && `0x${BigInt(params.timestamp).toString(16)}`, gasLimit: params.gasLimit && `0x${BigInt(params.gasLimit).toString(16)}`, baseFee: params.baseFee && `0x${params.baseFee.toString(16)}` });
}
exports.mungeSimBundleOptions = mungeSimBundleOptions;
//# sourceMappingURL=mungers.js.map