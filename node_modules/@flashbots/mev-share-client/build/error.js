"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnimplementedStreamEvent = exports.UnimplementedNetwork = exports.NetworkFailure = exports.JsonRpcError = void 0;
class MevShareError extends Error {
    constructor(message) {
        super(message);
        this.name = "MevShareError";
    }
}
class JsonRpcError extends MevShareError {
    constructor(error) {
        super(`${error.code}: ${error.message}`);
        this.name = `JsonRpcError: ${error.code}`;
        this.message = error.message;
    }
}
exports.JsonRpcError = JsonRpcError;
class NetworkFailure extends MevShareError {
    constructor(e) {
        var _a, _b;
        const err = e;
        super(`${(_a = err.response) === null || _a === void 0 ? void 0 : _a.status}: ${JSON.stringify((_b = err.response) === null || _b === void 0 ? void 0 : _b.data)}\n${err.stack}`);
        this.name = "NetworkFailure";
    }
}
exports.NetworkFailure = NetworkFailure;
class UnimplementedNetwork extends MevShareError {
    constructor({ chainId }) {
        super(`Cannot infer network params from chainId: ${chainId}`);
        this.name = "UnimplementedNetwork";
    }
}
exports.UnimplementedNetwork = UnimplementedNetwork;
class UnimplementedStreamEvent extends MevShareError {
    constructor(eventType) {
        super(`Unimplemented stream event type: ${eventType.toString()}`);
        this.name = "UnimplementedStreamEvent";
    }
}
exports.UnimplementedStreamEvent = UnimplementedStreamEvent;
exports.default = MevShareError;
//# sourceMappingURL=error.js.map