"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("./lib/helpers");
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    const provider = (0, helpers_1.getProvider)();
    const { mevshare } = yield (0, helpers_1.initExample)(provider);
    const info = yield mevshare.getEventHistoryInfo();
    console.log(info);
    let i = 0;
    let done = false;
    while (!done) {
        const resHistory = yield mevshare.getEventHistory({
            limit: info.maxLimit,
            offset: i * info.maxLimit,
            blockStart: info.minBlock,
        });
        for (const event of resHistory) {
            if (event.hint.txs) {
                console.log("event", event);
                console.log("txs", event.hint.txs);
                break;
            }
        }
        for (const event of resHistory) {
            if (event.hint.logs) {
                console.log("logs", event.hint.logs);
                done = true;
                break;
            }
        }
        i++;
    }
});
main();
//# sourceMappingURL=historicalStreamData.js.map