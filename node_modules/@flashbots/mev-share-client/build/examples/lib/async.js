"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncArray = exports.AsyncVar = void 0;
const async_mutex_1 = require("async-mutex");
/* Simple thread-safe mutable vars.
It feels like these should exist in a library somewhere already but ¯\_(ツ)_/¯ */
/** async mutex-guarded variable */
class AsyncVar {
    constructor(value) {
        this.value = value;
        this.mutex = new async_mutex_1.Mutex();
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const release = yield this.mutex.acquire();
            const value = this.value;
            release();
            return value;
        });
    }
    set(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const release = yield this.mutex.acquire();
            this.value = value;
            release();
        });
    }
}
exports.AsyncVar = AsyncVar;
/** async mutex-guarded array */
class AsyncArray extends AsyncVar {
    constructor(value) {
        super(value || []);
    }
    /** Pushes a new item to the array. */
    push(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const arr = yield this.get();
            arr.push(value);
            yield this.set(arr);
        });
    }
    /** Filter array in-place. */
    filter(filterFn) {
        return __awaiter(this, void 0, void 0, function* () {
            const arr = yield this.get();
            const filtered = arr.filter(filterFn);
            yield this.set(filtered);
        });
    }
    /** Returns true if value is included in the array. */
    includes(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const arr = yield this.get();
            return arr.includes(value);
        });
    }
    /** Returns length of array. */
    length() {
        return __awaiter(this, void 0, void 0, function* () {
            const arr = yield this.get();
            return arr.length;
        });
    }
}
exports.AsyncArray = AsyncArray;
//# sourceMappingURL=async.js.map