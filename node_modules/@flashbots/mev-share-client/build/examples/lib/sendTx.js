"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTx = exports.setupTxExample = void 0;
const ethers_1 = require("ethers");
const helpers_1 = require("./helpers");
const setupTxExample = (provider, tip, flair) => __awaiter(void 0, void 0, void 0, function* () {
    const { wallet, feeData, mevshare } = yield (0, helpers_1.initExample)(provider);
    const tipActual = tip ? tip.valueOf() : BigInt(0);
    const tx = {
        type: 2,
        chainId: provider._network.chainId,
        to: wallet.address,
        nonce: yield wallet.getNonce(),
        value: 0,
        gasLimit: 22000,
        data: (0, ethers_1.hexlify)((0, ethers_1.toUtf8Bytes)(flair || "im shariiiiiing")),
        maxFeePerGas: (0, ethers_1.toBigInt)(feeData.maxFeePerGas || 42) + tipActual,
        maxPriorityFeePerGas: (0, ethers_1.toBigInt)(feeData.maxPriorityFeePerGas || 2) + tipActual,
    };
    return {
        wallet,
        provider,
        mevshare,
        tx,
        signedTx: yield wallet.signTransaction(tx),
    };
});
exports.setupTxExample = setupTxExample;
const sendTx = (provider, hints, maxBlockNumber, tip) => __awaiter(void 0, void 0, void 0, function* () {
    const { mevshare, signedTx } = yield (0, exports.setupTxExample)(provider, tip);
    return yield mevshare.sendTransaction(signedTx, { hints, maxBlockNumber });
});
exports.sendTx = sendTx;
//# sourceMappingURL=sendTx.js.map