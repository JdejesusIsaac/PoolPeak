import { Wallet } from 'ethers';
import EventSource from "eventsource";
import { BundleParams, MevShareNetwork, TransactionOptions, StreamEvent, IPendingTransaction, IPendingBundle, SimBundleOptions, ISimBundleResult, ISendBundleResult, StreamEventName, EventHistoryInfo, EventHistoryParams } from './api/interfaces';
import { EventHistoryEntry } from "./api/mungers";
export default class Matchmaker {
    private authSigner;
    private network;
    constructor(authSigner: Wallet, network: MevShareNetwork);
    /** Connect to Flashbots Mainnet Matchmaker. */
    static useEthereumMainnet(authSigner: Wallet): Matchmaker;
    /** Connect to Flashbots Goerli Matchmaker. */
    static useEthereumGoerli(authSigner: Wallet): Matchmaker;
    /** Connect to supported networks by specifying a network with a `chainId`. */
    static fromNetwork(authSigner: Wallet, { chainId }: {
        chainId: number;
    }): Matchmaker;
    /** Make an HTTP POST request to a JSON-RPC endpoint.
     * @param url - URL to send the request to.
     * @param payload - body & headers.
     * @returns Response data.
    */
    private postRpc;
    /** Make an HTTP GET request.
     * @param urlSuffix - URL to send the request to.
     */
    private streamGet;
    /**
     * Sends a POST request to the Matchmaker API and returns the data.
     * @param params - JSON-RPC params.
     * @param method - JSON-RPC method.
     * @returns Response data from the API request.
     */
    private handleApiRequest;
    /**
     * Registers the provided callback to be called when a new MEV-Share transaction is received.
     * @param event - The event received from the event stream.
     * @param callback - Async function to process pending tx.
     */
    private onTransaction;
    /**
     * Registers the provided callback to be called when a new MEV-Share bundle is received.
     * @param event - The event received from the event stream.
     * @param callback - Async function to process pending tx.
     */
    private onBundle;
    /**
     * Starts listening to the Matchmaker event stream and registers the given callback to be invoked when the given event type is received.
     * @param eventType - The type of event to listen for. Options specified by StreamEvent enum.
     * @param callback - The function to call when a new event is received.
     * @returns Stream handler. Call `.close()` on it before terminating your program.
     */
    on(eventType: StreamEvent | StreamEventName, callback: (data: IPendingBundle | IPendingTransaction) => void): EventSource;
    /** Sends a private transaction with MEV hints to the Flashbots Matchmaker.
     * @param signedTx - Signed transaction to send.
     * @param options - Tx preferences; hints & block range.
     * @returns Transaction hash.
     */
    sendTransaction(signedTx: string, options?: TransactionOptions): Promise<string>;
    /** Sends a bundle to mev-share.
     * @param params - Parameters for the bundle.
     * @returns Array of bundle hashes.
     */
    sendBundle(params: BundleParams): Promise<ISendBundleResult>;
    /**
     * Internal mev_simBundle call.
     *
     * Note: This may only be used on matched bundles.
     * Simulating unmatched bundles (i.e. bundles with a hash present) will throw an error.
     * @param params - Parameters for the bundle.
     * @param simOptions - Simulation options; override block header data for simulation.
     * @returns Simulation result.
     */
    private simBundle;
    /** Simulates a bundle specified by `params`.
     *
     * Bundles containing pending transactions (specified by `{hash}` instead of `{tx}` in `params.body`) may
     * only be simulated after those transactions have landed on chain. If the bundle contains
     * pending transactions, this method will wait for the transactions to land before simulating.
     * @param params - Parameters for the bundle.
     * @param simOptions - Simulation options; override block header data for simulation.
     * @returns Simulation result.
     */
    simulateBundle(params: BundleParams, simOptions?: SimBundleOptions): Promise<ISimBundleResult>;
    /** Gets information about the event history endpoint, such as (// TODO) */
    getEventHistoryInfo(): Promise<EventHistoryInfo>;
    /** Gets past events that were broadcast via the SSE event stream. */
    getEventHistory(params?: EventHistoryParams): Promise<Array<EventHistoryEntry>>;
}
//# sourceMappingURL=matchmaker.d.ts.map