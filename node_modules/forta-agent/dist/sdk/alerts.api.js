"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlerts = void 0;
var axios_1 = __importDefault(require("axios"));
var alert_1 = require("./alert");
var utils_1 = require("./utils");
var getAlerts = function (query) { return __awaiter(void 0, void 0, void 0, function () {
    var response, pageInfo, alerts, _i, _a, alertData;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4, axios_1.default.post((0, utils_1.getFortaApiURL)(), getQueryFromAlertOptions(query), (0, utils_1.getFortaApiHeaders)())];
            case 1:
                response = _b.sent();
                if (response.data && response.data.errors)
                    throw Error(response.data.errors);
                pageInfo = response.data.data.alerts.pageInfo;
                alerts = [];
                for (_i = 0, _a = response.data.data.alerts.alerts; _i < _a.length; _i++) {
                    alertData = _a[_i];
                    alerts.push(alert_1.Alert.fromObject(alertData));
                }
                return [2, { alerts: alerts, pageInfo: pageInfo }];
        }
    });
}); };
exports.getAlerts = getAlerts;
var getQueryFromAlertOptions = function (options) {
    return {
        operationName: "fetchAlerts",
        query: "\n            query fetchAlerts(\n                $bots: [String], \n                $addresses: [String], \n                $after: AlertEndCursorInput,\n                $alertHash: String, \n                $alertName: String, \n                $alertId: String, \n                $alertIds: [String], \n                $chainId: NonNegativeInt,\n                $first: NonNegativeInt,\n                $projectId: String,\n                $scanNodeConfirmations: scanNodeFilters,\n                $severities: [String],\n                $transactionHash: String,\n                $blockSortDirection: Sort,\n                $createdSince: NonNegativeInt,\n                $createdBefore: NonNegativeInt,\n                $blockDateRange: DateRange,\n                $blockNumberRange: BlockRange\n                ) {\n                    alerts(input:{\n                        bots: $bots,\n                        addresses: $addresses,\n                        after: $after,\n                        alertHash: $alertHash,\n                        alertName: $alertName,\n                        alertId: $alertId,\n                        alertIds: $alertIds,\n                        chainId: $chainId,\n                        projectId: $projectId,\n                        scanNodeConfirmations: $scanNodeConfirmations,\n                        severities: $severities,\n                        transactionHash: $transactionHash,\n                        blockSortDirection: $blockSortDirection,\n                        first: $first,\n                        createdSince: $createdSince,\n                        createdBefore: $createdBefore,\n                        blockDateRange: $blockDateRange,\n                        blockNumberRange: $blockNumberRange\n                    }) {\n                        alerts {\n                            alertId\n                            addresses\n                            contracts {\n                                address\n                                name\n                                projectId\n                            }\n                            createdAt\n                            description\n                            hash\n                            metadata\n                            name\n                            projects {\n                                id\n                            }\n                            protocol\n                            scanNodeCount\n                            severity\n                            source {\n                                transactionHash\n                                bot {\n                                    chainIds\n                                    createdAt\n                                    description\n                                    developer\n                                    docReference\n                                    enabled\n                                    id\n                                    image\n                                    name\n                                    reference\n                                    repository\n                                    projects\n                                    scanNodes\n                                    version\n                                }\n                                block {\n                                    number\n                                    hash\n                                    timestamp\n                                    chainId\n                                }\n                                sourceAlert {\n                                    hash\n                                    botId\n                                    timestamp\n                                    chainId\n                                }\n                            }\n                            alertDocumentType\n                            findingType\n                            relatedAlerts\n                            chainId\n                            labels {\n                                label\n                                confidence\n                                entity\n                                entityType\n                                remove\n                                metadata\n                            }\n                            addressBloomFilter {\n                                bitset\n                                k\n                                m\n                            }\n                        }\n                        pageInfo {\n                            hasNextPage\n                            endCursor {\n                                alertId\n                                blockNumber\n                            }\n                        }\n                    }\n            }\n        ",
        variables: {
            bots: options.botIds,
            addresses: options.addresses,
            after: options.startingCursor,
            alertId: options.alertId,
            chainId: options.chainId,
            first: options.first,
            projectId: options.projectId,
            scanNodeConfirmations: options.scanNodeConfirmations,
            severities: options.severities,
            transactionHash: options.transactionHash,
            blockSortDirection: options.blockSortDirection,
            createdSince: options.createdSince,
            createdBefore: options.createdBefore,
            blockDateRange: options.blockDateRange
                ? {
                    startDate: options.blockDateRange.startDate
                        .toISOString()
                        .split("T")[0],
                    endDate: options.blockDateRange.endDate.toISOString().split("T")[0],
                }
                : undefined,
            blockNumberRange: options.blockNumberRange,
            alertIds: options.alertIds,
            alertHash: options.alertHash,
            alertName: options.alertName,
        },
    };
};
